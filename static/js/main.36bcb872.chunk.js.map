{"version":3,"sources":["components/Header.js","components/TravelItem.js","components/SettingsPopover.js","services/hooks/useLocalStorage.js","services/helpers.js","services/consts.js","components/CategoryIcon.js","services/hooks/useTranslatedCategory.js","components/TravelCard.js","components/Main.js","components/BottomNavbar.js","components/Footer.js","services/providers/LanguageProvider.js","components/LanguageLink.js","components/LanguagePicker.js","components/NavbarWithSidebar/NavbarContent.js","components/NavbarWithSidebar/SidebarContent.js","components/NavbarWithSidebar/NavbarWithSidebar.js","App.js","i18n.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","header","theme","orbit","spaceMedium","media","tablet","css","desktop","spaceLarge","Header","t","useTranslation","direction","align","name","size","alt","type","as","StyledButtonLink","div","heightCheckbox","widthCheckbox","TravelItem","item","shouldShowDeleteButton","toggleCheckedItem","handleDeleteItem","tKey","isChecked","justify","spacing","label","value","checked","onChange","disabled","iconLeft","ariaHidden","title","onClick","SettingsPopover","translatedCategory","togglePopover","handleShowDelete","handleResetCard","isSettingsOpened","content","category","fullWidth","opened","onClose","width","useLocalStorage","key","initialValue","window","localStorage","getItem","useState","JSON","parse","storedValue","setStoredValue","setItem","stringify","LIST_CATEGORIES","LANGUAGES","LANGUAGES_DATA","flagCode","EDIT_MODE","CategoryIcon","useTranslatedCategory","initialNewItem","error","TravelCard","initialCardItems","cardItems","setCardItems","editMode","setEditMode","newItem","setNewItem","itemTKey","filter","map","id","style","scrollMarginTop","icon","actions","Card","placeholder","e","text","target","charAt","toUpperCase","slice","toLowerCase","ref","input","focus","doesAlreadyExist","Boolean","find","preventDefault","ESSENTIALS","CLOTHES","TOILETRIES","OTHER","spaceSmall","defaultTokens","MainWrapper","main","borderColorCard","largeMobile","largeDesktop","Main","columnGap","rowGap","columns","items","data","StyledBottomNavbar","nav","paletteWhite","boxShadowFixedReverse","StyledButton","button","backgroundButtonLinkPrimary","borderRadiusLarge","backgroundButtonLinkPrimaryHover","colorIconPrimary","HamburgerButton","toggleSidebar","CategoryButton","element","document","getElementById","scrollIntoView","behavior","aria-label","BottomNavbar","FooterWrapper","footer","spaceXXLarge","Footer","href","external","noUnderline","LanguageContext","React","createContext","useLanguage","context","useContext","Error","LanguageProvider","children","selectedLanguage","setSelectedLanguage","i18n","Provider","language","setLanguage","changeLanguage","LanguageLink","event","standAlone","code","LanguagePicker","isPopoverOpen","setIsPopoverOpen","Object","keys","lang","handleChangeLanguage","preferredAlign","StyledIllustration","NavbarContent","isLargeMobile","useMediaQuery","shrink","SidebarContentPart","indent","AboutLink","SidebarContent","closeSidebar","dataTest","NavbarWithSidebar","isSidebarOpen","setIsSidebarOpen","isBottomNavbarVisible","onMenuOpen","shown","App","defaultTheme","dictionary","button_close","resources","translations","enTranslations","esTranslations","siTranslations","use","initReactI18next","init","lng","fallbackLng","ns","defaultNS","keySeparator","interpolation","escapeValue","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36bcb872.chunk.js","sourcesContent":["// @flow\nimport React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport media from \"@kiwicom/orbit-components/lib/utils/mediaQuery\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\nimport Illustration from \"@kiwicom/orbit-components/lib/Illustration\"\n\nconst HeaderWrapper = styled.header`\n  margin-top: 52px; // because of navbar\n  padding: ${({ theme }) => theme.orbit.spaceMedium};\n\n  h1 {\n    text-align: center;\n    text-transform: uppercase;\n  }\n\n  ${media.tablet(css`\n    margin-top: 64px; // because of navbar\n  `)};\n\n  ${media.desktop(css`\n    padding: ${({ theme }) => theme.orbit.spaceLarge};\n  `)};\n`\n\nconst Header = (): React$Node => {\n  const { t } = useTranslation()\n\n  return (\n    <HeaderWrapper>\n      <Stack direction=\"column\" align=\"center\">\n        <Illustration name=\"TimelinePick\" size=\"extraSmall\" alt=\"\" />\n        <Heading type=\"title2\" as=\"h1\">\n          {t(\"title\")}\n        </Heading>\n      </Stack>\n    </HeaderWrapper>\n  )\n}\n\nexport default Header\n","// @flow\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Checkbox from \"@kiwicom/orbit-components/lib/Checkbox\"\nimport ButtonLink from \"@kiwicom/orbit-components/lib/ButtonLink\"\nimport { Close } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport type { CardItem } from \"../services/types\"\n\nconst StyledButtonLink = styled.div`\n  button {\n    height: ${({ theme }) => theme.orbit.heightCheckbox};\n    width: ${({ theme }) => theme.orbit.widthCheckbox};\n  }\n`\n\ntype Props = {|\n  item: CardItem,\n  shouldShowDeleteButton: boolean,\n  toggleCheckedItem: string => void,\n  handleDeleteItem: string => void,\n|}\n\nconst TravelItem = ({\n  item,\n  shouldShowDeleteButton,\n  toggleCheckedItem,\n  handleDeleteItem,\n}: Props): React$Node => {\n  const { t } = useTranslation()\n  const { tKey, isChecked } = item\n\n  return (\n    <Stack direction=\"row\" align=\"start\" justify=\"between\" spacing=\"medium\">\n      <Checkbox\n        label={t(tKey)}\n        name={tKey}\n        value={tKey}\n        checked={isChecked}\n        onChange={() => toggleCheckedItem(tKey)}\n        disabled={shouldShowDeleteButton}\n      />\n      {shouldShowDeleteButton && (\n        <StyledButtonLink>\n          <ButtonLink\n            type=\"critical\"\n            size=\"small\"\n            iconLeft={<Close ariaHidden />}\n            title={t(\"button.delete_item\", { item: t(tKey) })}\n            onClick={() => handleDeleteItem(tKey)}\n          />\n        </StyledButtonLink>\n      )}\n    </Stack>\n  )\n}\n\nexport default TravelItem\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Button from \"@kiwicom/orbit-components/lib/Button\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\nimport { Remove, Replace, Settings } from \"@kiwicom/orbit-components/lib/icons\"\nimport Popover from \"@kiwicom/orbit-components/lib/Popover\"\n\ntype Props = {|\n  translatedCategory: string,\n  togglePopover: () => void,\n  handleShowDelete: () => void,\n  handleResetCard: () => void,\n  isSettingsOpened: boolean,\n|}\n\nconst SettingsPopover = ({\n  translatedCategory,\n  togglePopover,\n  handleShowDelete,\n  handleResetCard,\n  isSettingsOpened,\n}: Props): React$Node => {\n  const { t } = useTranslation()\n\n  return (\n    <Popover\n      content={\n        <Stack direction=\"column\" spacing=\"medium\">\n          <Heading type=\"title4\" as=\"h3\">\n            {t(\"title.settings_list\", { category: translatedCategory })}\n          </Heading>\n          <Button\n            type=\"secondary\"\n            iconLeft={<Remove ariaHidden />}\n            size=\"small\"\n            onClick={handleShowDelete}\n            fullWidth\n          >\n            {t(\"button.remove_items\")}\n          </Button>\n          <Button\n            type=\"criticalSubtle\"\n            iconLeft={<Replace ariaHidden />}\n            size=\"small\"\n            onClick={handleResetCard}\n            fullWidth\n          >\n            {t(\"button.reset_list\")}\n          </Button>\n        </Stack>\n      }\n      opened={isSettingsOpened}\n      onClose={togglePopover}\n      width=\"250px\"\n    >\n      <Button\n        size=\"small\"\n        type=\"secondary\"\n        iconLeft={<Settings ariaHidden />}\n        title={t(\"title.settings_list\", { category: translatedCategory })}\n        onClick={togglePopover}\n      />\n    </Popover>\n  )\n}\n\nexport default SettingsPopover\n","// @flow\nimport { useState } from \"react\"\n\nexport default function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  // get value from local storage by key\n  const item = window.localStorage.getItem(key)\n\n  const [storedValue, setStoredValue] = useState<T>(item ? JSON.parse(item) : initialValue)\n\n  const setValue = (value: T) => {\n    // save state\n    setStoredValue(value)\n\n    // save to local storage\n    window.localStorage.setItem(key, JSON.stringify(value))\n  }\n\n  return [storedValue, setValue]\n}\n","// @flow\n\nexport const capitalize = (text: string): string => {\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase()\n}\n","// @flow\nimport type { LanguagesData } from \"./types\"\n\nexport const LIST_CATEGORIES = {\n  ESSENTIALS: \"essentials\",\n  CLOTHES: \"clothes\",\n  TOILETRIES: \"toiletries\",\n  OTHER: \"other\",\n}\n\nexport const LANGUAGES = {\n  ENGLISH: \"en\",\n  SLOVENIAN: \"si\",\n  SPANISH: \"es\",\n}\n\nexport const LANGUAGES_DATA: LanguagesData = {\n  [LANGUAGES.ENGLISH]: {\n    value: LANGUAGES.ENGLISH,\n    flagCode: \"gb\",\n    title: \"English\",\n  },\n  [LANGUAGES.SPANISH]: {\n    value: LANGUAGES.SPANISH,\n    flagCode: \"es\",\n    title: \"Español\",\n  },\n  [LANGUAGES.SLOVENIAN]: {\n    value: LANGUAGES.SLOVENIAN,\n    flagCode: \"si\",\n    title: \"Slovenščina\",\n  },\n}\n\nexport const EDIT_MODE = {\n  DEFAULT: \"default\",\n  OPEN_SETTINGS: \"openSettings\",\n  REMOVE_ITEMS: \"removeItems\",\n  ADD_ITEM: \"addItem\",\n}\n","// @flow\nimport React from \"react\"\nimport { Spa, Suitcase, Wallet, TermsAndConditions } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport { LIST_CATEGORIES } from \"../services/consts\"\nimport type { ListCategory } from \"../services/types\"\n\ntype Props = {|\n  category: ListCategory,\n|}\n\nconst CategoryIcon = ({ category }: Props): React$Node => {\n  switch (category) {\n    case LIST_CATEGORIES.ESSENTIALS:\n      return <Wallet ariaHidden />\n    case LIST_CATEGORIES.TOILETRIES:\n      return <Spa ariaHidden />\n    case LIST_CATEGORIES.OTHER:\n      return <TermsAndConditions ariaHidden />\n    case LIST_CATEGORIES.CLOTHES:\n    default:\n      return <Suitcase ariaHidden />\n  }\n}\n\nexport default CategoryIcon\n","// @flow\nimport { useTranslation } from \"react-i18next\"\n\nimport { LIST_CATEGORIES } from \"../consts\"\nimport type { ListCategory } from \"../types\"\n\nconst useTranslatedCategory = (category: ListCategory): string => {\n  const { t } = useTranslation()\n\n  switch (category) {\n    case LIST_CATEGORIES.ESSENTIALS:\n      return t(\"category.essentials\")\n    case LIST_CATEGORIES.TOILETRIES:\n      return t(\"category.toiletries\")\n    case LIST_CATEGORIES.OTHER:\n      return t(\"category.other\")\n    case LIST_CATEGORIES.CLOTHES:\n    default:\n      return t(\"category.clothes\")\n  }\n}\n\nexport default useTranslatedCategory\n","// @flow\nimport React, { useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Card, { CardSection } from \"@kiwicom/orbit-components/lib/Card\"\nimport Button from \"@kiwicom/orbit-components/lib/Button\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport InputField from \"@kiwicom/orbit-components/lib/InputField\"\nimport { Plus } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport TravelItem from \"./TravelItem\"\nimport SettingsPopover from \"./SettingsPopover\"\nimport type { CardItems, ListCategory } from \"../services/types\"\nimport useLocalStorage from \"../services/hooks/useLocalStorage\"\nimport { capitalize } from \"../services/helpers\"\nimport { EDIT_MODE } from \"../services/consts\"\nimport CategoryIcon from \"./CategoryIcon\"\nimport useTranslatedCategory from \"../services/hooks/useTranslatedCategory\"\n\nconst initialNewItem = { value: \"\", error: null }\n\ntype Props = {|\n  category: ListCategory,\n  initialCardItems: CardItems,\n|}\n\nconst TravelCard = ({ category, initialCardItems }: Props): React$Node => {\n  const { t } = useTranslation()\n  const translatedCategory = useTranslatedCategory(category)\n  const [cardItems, setCardItems] = useLocalStorage<CardItems>(\n    `travel-packing-list:list-${category}`,\n    initialCardItems,\n  )\n  const [editMode, setEditMode] = useState(EDIT_MODE.DEFAULT)\n  const [newItem, setNewItem] = useState(initialNewItem)\n\n  const togglePopover = () => {\n    if (editMode === EDIT_MODE.OPEN_SETTINGS) {\n      setEditMode(EDIT_MODE.DEFAULT)\n    } else {\n      setEditMode(EDIT_MODE.OPEN_SETTINGS)\n    }\n  }\n\n  const handleDeleteItem = (itemTKey: string) => {\n    setCardItems(cardItems.filter(item => item.tKey !== itemTKey))\n  }\n\n  const toggleCheckedItem = (itemTKey: string) => {\n    setCardItems(\n      cardItems.map(item =>\n        item.tKey === itemTKey ? { ...item, isChecked: !item.isChecked } : item,\n      ),\n    )\n  }\n\n  const handleResetCard = () => {\n    setCardItems(initialCardItems)\n    setEditMode(EDIT_MODE.DEFAULT)\n  }\n\n  const handleSubmitNewItem = e => {\n    const doesAlreadyExist = Boolean(cardItems.find(item => t(item.tKey) === newItem.value))\n\n    if (!newItem.value) {\n      setNewItem({ ...newItem, error: t(\"input.error.enter_item\") })\n    } else if (doesAlreadyExist) {\n      setNewItem({ ...newItem, error: t(\"input.error.already_exist\") })\n    } else {\n      e.preventDefault()\n      // update data\n      setCardItems([...cardItems, { tKey: newItem.value, isChecked: false }])\n\n      // clear states\n      setEditMode(EDIT_MODE.DEFAULT)\n      setNewItem(initialNewItem)\n    }\n  }\n\n  const handleInputChange = e => {\n    setNewItem({ error: null, value: capitalize(e.target.value) })\n  }\n\n  return (\n    <Card\n      title={\n        <span id={category} style={{ scrollMarginTop: \"65px\" }}>\n          {translatedCategory}\n        </span>\n      }\n      icon={<CategoryIcon category={category} />}\n      actions={\n        <SettingsPopover\n          translatedCategory={translatedCategory}\n          togglePopover={togglePopover}\n          handleShowDelete={() => setEditMode(EDIT_MODE.REMOVE_ITEMS)}\n          handleResetCard={handleResetCard}\n          isSettingsOpened={editMode === EDIT_MODE.OPEN_SETTINGS}\n        />\n      }\n    >\n      <CardSection>\n        <Stack direction=\"column\" spacing=\"medium\" desktop={{ spacing: \"XSmall\" }}>\n          {cardItems.map(item => (\n            <TravelItem\n              key={item.tKey}\n              item={item}\n              shouldShowDeleteButton={editMode === EDIT_MODE.REMOVE_ITEMS}\n              toggleCheckedItem={toggleCheckedItem}\n              handleDeleteItem={handleDeleteItem}\n            />\n          ))}\n          {editMode === EDIT_MODE.ADD_ITEM ? (\n            <Stack direction=\"row\" spacing=\"XSmall\">\n              <InputField\n                name=\"New item\"\n                size=\"small\"\n                placeholder={t(\"placeholder.type_item\")}\n                value={newItem.value}\n                onChange={handleInputChange}\n                error={newItem.error}\n                ref={input => input && input.focus()}\n              />\n              <Button size=\"small\" onClick={handleSubmitNewItem}>\n                {t(\"button.save\")}\n              </Button>\n            </Stack>\n          ) : (\n            <Stack direction=\"row\" justify=\"between\">\n              <Button\n                type=\"secondary\"\n                iconLeft={<Plus ariaHidden />}\n                size=\"small\"\n                onClick={() => setEditMode(EDIT_MODE.ADD_ITEM)}\n                disabled={editMode === EDIT_MODE.REMOVE_ITEMS}\n              >\n                {t(\"button.add_item\")}\n              </Button>\n              {editMode === EDIT_MODE.REMOVE_ITEMS && (\n                <Button type=\"critical\" size=\"small\" onClick={() => setEditMode(EDIT_MODE.DEFAULT)}>\n                  {t(\"button.save\")}\n                </Button>\n              )}\n            </Stack>\n          )}\n        </Stack>\n      </CardSection>\n    </Card>\n  )\n}\n\nexport default TravelCard\n","// @flow\nimport React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport { defaultTokens } from \"@kiwicom/orbit-design-tokens\"\nimport Grid from \"@kiwicom/orbit-components/lib/utils/Grid\"\nimport media from \"@kiwicom/orbit-components/lib/utils/mediaQuery\"\n\nimport TravelCard from \"./TravelCard\"\nimport data from \"../services/data.json\"\nimport { LIST_CATEGORIES } from \"../services/consts\"\nimport type { CardItems } from \"../services/types\"\n\nconst { ESSENTIALS, CLOTHES, TOILETRIES, OTHER } = LIST_CATEGORIES\n\nconst { spaceSmall, spaceMedium, spaceLarge } = defaultTokens\n\nconst MainWrapper = styled.main`\n  background-color: ${({ theme }) => theme.orbit.borderColorCard};\n  padding: ${({ theme }) => theme.orbit.spaceSmall};\n\n  ${media.largeMobile(css`\n    padding: ${({ theme }) => theme.orbit.spaceMedium};\n  `)};\n\n  ${media.largeDesktop(css`\n    padding: ${({ theme }) => theme.orbit.spaceLarge};\n  `)};\n`\n\nfunction cardItemsMapper(items: Array<string>): CardItems {\n  return items.map(item => ({ tKey: item, isChecked: false }))\n}\n\nconst Main = (): React$Node => {\n  return (\n    <MainWrapper>\n      <Grid\n        columnGap={spaceMedium}\n        rowGap={spaceSmall}\n        largeMobile={{ columns: \"1fr 1fr\", rowGap: spaceMedium }}\n        desktop={{ columns: \"1fr 1fr 1fr 1fr\" }}\n        largeDesktop={{ rowGap: spaceLarge, columnGap: spaceLarge }}\n      >\n        {[ESSENTIALS, CLOTHES, TOILETRIES, OTHER].map(category => (\n          <TravelCard\n            key={category}\n            category={category}\n            initialCardItems={cardItemsMapper(data[category].items)}\n          />\n        ))}\n      </Grid>\n    </MainWrapper>\n  )\n}\n\nexport default Main\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport styled from \"styled-components\"\nimport MenuHamburger from \"@kiwicom/orbit-components/lib/icons/MenuHamburger\"\n\nimport { LIST_CATEGORIES } from \"../services/consts\"\nimport useTranslatedCategory from \"../services/hooks/useTranslatedCategory\"\nimport CategoryIcon from \"./CategoryIcon\"\nimport type { ListCategory } from \"../services/types\"\n\nconst { ESSENTIALS, CLOTHES, TOILETRIES, OTHER } = LIST_CATEGORIES\n\nexport const BOTTOM_NAVBAR_HEIGHT = 50 // px\n\nconst StyledBottomNavbar = styled.nav`\n  height: ${BOTTOM_NAVBAR_HEIGHT}px;\n  width: 100%;\n  background: ${({ theme }) => theme.orbit.paletteWhite};\n  box-shadow: ${({ theme }) => theme.orbit.boxShadowFixedReverse};\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  align-content: center;\n  flex-direction: row;\n  justify-content: space-around;\n  z-index: 700;\n`\n\nconst StyledButton = styled.button`\n  width: 60px;\n  height: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  padding: 0;\n  background: ${({ theme }) => theme.orbit.backgroundButtonLinkPrimary};\n  border-radius: ${({ theme }) => theme.orbit.borderRadiusLarge};\n  outline: 0;\n\n  @media (hover: hover) {\n    &:hover,\n    &:focus {\n      background: ${({ theme }) => theme.orbit.backgroundButtonLinkPrimaryHover};\n    }\n  }\n\n  span {\n    font-size: 8px;\n    letter-spacing: 0.5px;\n    text-align: center;\n    color: ${({ theme }) => theme.orbit.colorIconPrimary};\n    user-select: none; // disable selecting text (Chrome was selecting it when you clicked button text)\n  }\n`\n\ntype HamburgerButtonProps = {|\n  toggleSidebar: () => void,\n|}\nconst HamburgerButton = ({ toggleSidebar }: HamburgerButtonProps): React$Node => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledButton onClick={toggleSidebar}>\n      <MenuHamburger ariaHidden />\n      <span>{t(\"button.more\")}</span>\n    </StyledButton>\n  )\n}\n\ntype CategoryButtonProps = {|\n  category: ListCategory,\n|}\nconst CategoryButton = ({ category }: CategoryButtonProps): React$Node => {\n  const { t } = useTranslation()\n  const translatedCategory = useTranslatedCategory(category)\n\n  return (\n    <StyledButton\n      key={category}\n      onClick={() => {\n        const element = document.getElementById(category)\n        return element && element.scrollIntoView({ behavior: \"smooth\" })\n      }}\n      aria-label={t(\"button.scroll_to_list\", { category: translatedCategory })}\n    >\n      <CategoryIcon category={category} />\n      <span>{translatedCategory}</span>\n    </StyledButton>\n  )\n}\n\ntype Props = {|\n  toggleSidebar: () => void,\n|}\n\nconst BottomNavbar = ({ toggleSidebar }: Props): React$Node => {\n  return (\n    <StyledBottomNavbar aria-label=\"Category navigation bar\">\n      {[ESSENTIALS, CLOTHES, TOILETRIES, OTHER].map(category => (\n        <CategoryButton key={category} category={category} />\n      ))}\n      <HamburgerButton toggleSidebar={toggleSidebar} />\n    </StyledBottomNavbar>\n  )\n}\n\nexport default BottomNavbar\n","// @flow\nimport React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport media from \"@kiwicom/orbit-components/lib/utils/mediaQuery\"\nimport Text from \"@kiwicom/orbit-components/lib/Text\"\nimport TextLink from \"@kiwicom/orbit-components/lib/TextLink\"\nimport { BOTTOM_NAVBAR_HEIGHT } from \"./BottomNavbar\"\n\nconst FooterWrapper = styled.footer`\n  background-color: ${({ theme }) => theme.orbit.borderColorCard};\n  padding: ${({ theme }) => `0 ${theme.orbit.spaceXXLarge} ${theme.orbit.spaceSmall}`};\n  margin-bottom: ${BOTTOM_NAVBAR_HEIGHT}px;\n  user-select: none; // disable selecting text (Chrome was selecting it when you clicked bottom navbar button)\n\n  ${media.largeMobile(css`\n    padding: ${({ theme }) => `0 ${theme.orbit.spaceMedium} ${theme.orbit.spaceMedium}`};\n    margin-bottom: 0;\n  `)};\n`\n\nconst Footer = (): React$Node => {\n  return (\n    <FooterWrapper>\n      <Text size=\"small\" align=\"center\">\n        <TextLink href=\"https://flanzana.github.io/\" external type=\"secondary\" noUnderline>\n          Žana Flander\n        </TextLink>\n        <span> © 2021</span>\n      </Text>\n    </FooterWrapper>\n  )\n}\n\nexport default Footer\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport useLocalStorage from \"../hooks/useLocalStorage\"\nimport { LANGUAGES } from \"../consts\"\nimport type { Language } from \"../types\"\n\ntype LanguageContextType = {|\n  language: Language,\n  setLanguage: Language => void,\n|}\n\nconst LanguageContext = React.createContext<LanguageContextType | null>(null)\n\ntype LanguageProviderProps = {|\n  children: React$Node,\n|}\n\nconst LanguageProvider = ({ children }: LanguageProviderProps): React$Node => {\n  const [selectedLanguage, setSelectedLanguage] = useLocalStorage<Language>(\n    \"travel-packing-list:language\",\n    LANGUAGES.ENGLISH,\n  )\n  const { i18n } = useTranslation()\n\n  const handleSetLanguage = (language: Language) => {\n    setSelectedLanguage(language)\n    i18n.changeLanguage(language)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        language: selectedLanguage,\n        setLanguage: handleSetLanguage,\n      }}\n    >\n      {children}\n    </LanguageContext.Provider>\n  )\n}\n\nexport const useLanguage = (): LanguageContextType => {\n  const context = React.useContext(LanguageContext)\n\n  if (!context) {\n    throw new Error(\"useLanguage must be used within the LanguageProvider.\")\n  }\n\n  return context\n}\n\nexport default LanguageProvider\n","// @flow\nimport React from \"react\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport CountryFlag from \"@kiwicom/orbit-components/lib/CountryFlag\"\nimport TextLink from \"@kiwicom/orbit-components/lib/TextLink\"\n\nimport { LANGUAGES_DATA } from \"../services/consts\"\nimport type { Language } from \"../services/types\"\n\ntype Props = {|\n  onClick: () => void,\n  language: Language,\n|}\n\nconst LanguageLink = ({ language, onClick }: Props): React$Node => (\n  <TextLink\n    onClick={event => {\n      event.preventDefault()\n      onClick()\n    }}\n    href=\"#\" // for keyboard access\n    type=\"secondary\"\n    title={LANGUAGES_DATA[language].title}\n    standAlone\n  >\n    <Stack direction=\"row\" align=\"center\" spacing=\"XSmall\">\n      <CountryFlag code={LANGUAGES_DATA[language].flagCode} name=\"\" />\n      <span>{LANGUAGES_DATA[language].title}</span>\n    </Stack>\n  </TextLink>\n)\n\nexport default LanguageLink\n","// @flow\nimport React, { useState } from \"react\"\nimport CountryFlag from \"@kiwicom/orbit-components/lib/CountryFlag\"\nimport LinkList from \"@kiwicom/orbit-components/lib/LinkList\"\nimport ButtonLink from \"@kiwicom/orbit-components/lib/ButtonLink\"\nimport Popover from \"@kiwicom/orbit-components/lib/Popover\"\n\nimport { LANGUAGES_DATA } from \"../services/consts\"\nimport type { Language } from \"../services/types\"\nimport { useLanguage } from \"../services/providers/LanguageProvider\"\nimport LanguageLink from \"./LanguageLink\"\n\nconst LanguagePicker = (): React$Node => {\n  const { language, setLanguage } = useLanguage()\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false)\n\n  const handleChangeLanguage = (lang: Language) => {\n    setLanguage(lang)\n    setIsPopoverOpen(false)\n  }\n\n  const togglePopover = () => {\n    setIsPopoverOpen(!isPopoverOpen)\n  }\n\n  return (\n    <Popover\n      opened={isPopoverOpen}\n      onClose={() => setIsPopoverOpen(false)}\n      content={\n        <LinkList spacing=\"none\">\n          {Object.keys(LANGUAGES_DATA).map(lang => (\n            <LanguageLink key={lang} language={lang} onClick={() => handleChangeLanguage(lang)} />\n          ))}\n        </LinkList>\n      }\n      preferredAlign=\"end\"\n    >\n      <ButtonLink onClick={togglePopover} type=\"secondary\" title={LANGUAGES_DATA[language].title}>\n        <CountryFlag code={LANGUAGES_DATA[language].flagCode} name=\"\" />\n      </ButtonLink>\n    </Popover>\n  )\n}\n\nexport default LanguagePicker\n","// @flow\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\nimport Illustration from \"@kiwicom/orbit-components/lib/Illustration\"\nimport useMediaQuery from \"@kiwicom/orbit-components/lib/hooks/useMediaQuery\"\n\nimport LanguagePicker from \"../LanguagePicker\"\n\nconst StyledIllustration = styled.div`\n  img {\n    max-height: 30px !important;\n  }\n`\n\nconst NavbarContent = (): React$Node => {\n  const { t } = useTranslation()\n  const { isLargeMobile } = useMediaQuery()\n\n  return (\n    <Stack direction=\"row\" align=\"center\" justify=\"between\">\n      <Stack\n        direction=\"row\"\n        align=\"center\"\n        spacing=\"XSmall\"\n        shrink\n        largeMobile={{ spacing: \"medium\" }}\n      >\n        <StyledIllustration>\n          <Illustration name=\"CabinBaggage\" size=\"extraSmall\" alt=\"\" />\n        </StyledIllustration>\n        <Heading type=\"title3\">{t(\"title\")}</Heading>\n      </Stack>\n      {isLargeMobile && <LanguagePicker />}\n    </Stack>\n  )\n}\n\nexport default NavbarContent\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport LinkList from \"@kiwicom/orbit-components/lib/LinkList\"\nimport TextLink from \"@kiwicom/orbit-components/lib/TextLink\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\nimport Separator from \"@kiwicom/orbit-components/lib/Separator\"\nimport { Code } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport { LANGUAGES_DATA } from \"../../services/consts\"\nimport LanguageLink from \"../LanguageLink\"\nimport type { Language } from \"../../services/types\"\nimport { useLanguage } from \"../../services/providers/LanguageProvider\"\n\ntype SidebarContentPartProps = {|\n  title: string,\n  children: React$Node,\n|}\nconst SidebarContentPart = ({ title, children }: SidebarContentPartProps): React$Node => (\n  <>\n    <Separator />\n    <Stack>\n      <Heading type=\"title5\">{title}</Heading>\n      <LinkList indent spacing=\"none\">\n        {children}\n      </LinkList>\n    </Stack>\n  </>\n)\n\ntype AboutLinkProps = {|\n  href: string,\n  label: string,\n|}\nconst AboutLink = ({ href, label }: AboutLinkProps): React$Node => (\n  <TextLink href={href} type=\"secondary\" title={label} standAlone external>\n    <Stack direction=\"row\" align=\"center\" spacing=\"XSmall\">\n      <Code size=\"small\" />\n      <span>{label}</span>\n    </Stack>\n  </TextLink>\n)\n\ntype Props = {|\n  closeSidebar: () => void,\n|}\n\nconst SidebarContent = ({ closeSidebar }: Props): React$Node => {\n  const { t } = useTranslation()\n  const { setLanguage } = useLanguage()\n\n  const handleChangeLanguage = (language: Language) => {\n    setLanguage(language)\n    closeSidebar()\n  }\n\n  return (\n    <Stack dataTest=\"SidebarContent\">\n      <SidebarContentPart title={t(\"sidebar.title.language\")}>\n        {Object.keys(LANGUAGES_DATA).map(lang => (\n          <LanguageLink key={lang} language={lang} onClick={() => handleChangeLanguage(lang)} />\n        ))}\n      </SidebarContentPart>\n      <SidebarContentPart title={t(\"sidebar.title.more_about\")}>\n        <AboutLink label=\"Žana Flander\" href=\"https://flanzana.github.io/\" />\n        <AboutLink label=\"Design system Orbit\" href=\"https://orbit.kiwi\" />\n      </SidebarContentPart>\n    </Stack>\n  )\n}\n\nexport default SidebarContent\n","// @flow\nimport React, { useState } from \"react\"\nimport NavigationBar from \"@kiwicom/orbit-components/lib/NavigationBar\"\nimport Drawer from \"@kiwicom/orbit-components/lib/Drawer\"\nimport useMediaQuery from \"@kiwicom/orbit-components/lib/hooks/useMediaQuery\"\n\nimport NavbarContent from \"./NavbarContent\"\nimport SidebarContent from \"./SidebarContent\"\nimport BottomNavbar from \"../BottomNavbar\"\n\nconst NavbarWithSidebar = (): React$Node => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n  const { isLargeMobile } = useMediaQuery()\n\n  // not visible on screen wider than 575px\n  const isBottomNavbarVisible = !isLargeMobile\n\n  return (\n    <>\n      <NavigationBar\n        // hide hamburger icon because it is visible in bottom navbar\n        {...(!isBottomNavbarVisible && { onMenuOpen: () => setIsSidebarOpen(true) })}\n        dataTest=\"NavigationBar\"\n      >\n        <NavbarContent />\n      </NavigationBar>\n      {isBottomNavbarVisible && (\n        <BottomNavbar toggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)} />\n      )}\n      <Drawer shown={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} dataTest=\"Sidebar\">\n        <SidebarContent closeSidebar={() => setIsSidebarOpen(false)} />\n      </Drawer>\n    </>\n  )\n}\n\nexport default NavbarWithSidebar\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport ThemeProvider from \"@kiwicom/orbit-components/lib/ThemeProvider\"\nimport defaultTheme from \"@kiwicom/orbit-components/lib/defaultTheme\"\n\nimport Header from \"./components/Header\"\nimport Main from \"./components/Main\"\nimport Footer from \"./components/Footer\"\nimport NavbarWithSidebar from \"./components/NavbarWithSidebar/NavbarWithSidebar\"\nimport LanguageProvider from \"./services/providers/LanguageProvider\"\n\nfunction App(): React$Node {\n  const { t } = useTranslation()\n\n  return (\n    <ThemeProvider\n      theme={{ ...defaultTheme }}\n      dictionary={{\n        button_close: t(\"button.close\"),\n      }}\n    >\n      <LanguageProvider>\n        <>\n          <NavbarWithSidebar />\n          <Header />\n          <Main />\n          <Footer />\n        </>\n      </LanguageProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// @flow\nimport i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n\nimport enTranslations from \"./services/translations/en.json\"\nimport siTranslations from \"./services/translations/si.json\"\nimport esTranslations from \"./services/translations/es.json\"\nimport { LANGUAGES } from \"./services/consts\"\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  [LANGUAGES.ENGLISH]: {\n    translations: enTranslations,\n  },\n  [LANGUAGES.SPANISH]: {\n    translations: esTranslations,\n  },\n  [LANGUAGES.SLOVENIAN]: {\n    translations: siTranslations,\n  },\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng:\n      JSON.parse(window.localStorage.getItem(\"travel-packing-list:language\")) || LANGUAGES.ENGLISH,\n    fallbackLng: LANGUAGES.ENGLISH,\n\n    // have a common namespace used around the full app\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  })\n\nexport default i18n\n","/* istanbul ignore file */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// eslint-disable-next-line flowtype/require-valid-file-annotation\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","// @flow\n/* istanbul ignore file */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport \"./i18n\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}